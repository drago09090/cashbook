import { Entry, ReportSettings } from '../types';

export function generateExcel(
  entries: Entry[], 
  bookName: string, 
  userName: string, 
  settings: ReportSettings
) {
  const totals = entries.reduce((acc, entry) => {
    if (entry.type === 'cash_in') {
      acc.cashIn += Number(entry.amount);
    } else {
      acc.cashOut += Number(entry.amount);
    }
    return acc;
  }, { cashIn: 0, cashOut: 0 });

  const balance = totals.cashIn - totals.cashOut;
  const formatDate = (dateStr: string) => new Date(dateStr).toLocaleDateString('en-GB');

  // Generate headers
  const headers = [];
  if (settings.columns.date) headers.push('Date');
  if (settings.columns.remark) headers.push('Remark');
  if (settings.columns.contact) headers.push('Contact');
  if (settings.columns.category) headers.push('Category');
  if (settings.columns.paymentModes) headers.push('Mode');
  if (settings.columns.cashIn) headers.push('Cash In');
  if (settings.columns.cashOut) headers.push('Cash Out');
  if (settings.columns.members) headers.push('Entry By');
  if (settings.columns.balance) headers.push('Balance');

  // Generate CSV content
  let csvContent = `CashBook Report - ${bookName}\n`;
  csvContent += `Generated On: ${new Date().toLocaleDateString('en-GB')} ${new Date().toLocaleTimeString('en-US', { hour12: false })}\n`;
  csvContent += `Generated by: ${userName}\n\n`;
  csvContent += `Total Cash In:,${totals.cashIn}\n`;
  csvContent += `Total Cash Out:,${totals.cashOut}\n`;
  csvContent += `Final Balance:,${balance}\n`;
  csvContent += `Total Entries:,${entries.length}\n\n`;
  
  // Add headers
  csvContent += headers.join(',') + '\n';

  // Add data rows
  let runningBalance = 0;
  entries.forEach(entry => {
    runningBalance += entry.type === 'cash_in' ? Number(entry.amount) : -Number(entry.amount);
    
    const row = [];
    if (settings.columns.date) row.push(`"${formatDate(entry.date)}"`);
    if (settings.columns.remark) row.push(`"${(entry.remarks || '--').replace(/"/g, '""')}"`);
    if (settings.columns.contact) row.push(`"${(entry.contact_name || '--').replace(/"/g, '""')}"`);
    if (settings.columns.category) row.push(`"${(entry.category || '--').replace(/"/g, '""')}"`);
    if (settings.columns.paymentModes) row.push(`"${entry.payment_mode}"`);
    if (settings.columns.attachments) row.push(`"${entry.attachments?.length ? `${entry.attachments.length} file(s)` : '--'}"`);
    if (settings.columns.voice) row.push(`"${entry.voice_recording ? 'Yes' : '--'}"`);
    if (settings.columns.cashIn) row.push(entry.type === 'cash_in' ? Number(entry.amount) : '');
    if (settings.columns.cashOut) row.push(entry.type === 'cash_out' ? Number(entry.amount) : '');
    if (settings.columns.members) row.push(`"${userName}"`);
    if (settings.columns.balance) row.push(runningBalance);
    
    csvContent += row.join(',') + '\n';
  });

  // Create and download file
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', `${bookName}_${new Date().toISOString().split('T')[0]}.csv`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}