import { useState } from 'react';
import { X, Download, Settings, FileText, FileSpreadsheet } from 'lucide-react';
import { Modal } from '../ui/Modal';
import { Button } from '../ui/Button';
import { Entry, ReportSettings } from '../../types';
import { useAuth } from '../../hooks/useAuth';
import { PDFSettingsModal } from './PDFSettingsModal';
import { generatePDF } from '../../utils/pdfGenerator';
import { generateExcel } from '../../utils/excelGenerator';

interface ReportModalProps {
  isOpen: boolean;
  onClose: () => void;
  entries: Entry[];
  selectedEntries: string[];
  bookName: string;
}

export function ReportModal({ isOpen, onClose, entries, selectedEntries, bookName }: ReportModalProps) {
  const { user } = useAuth();
  const [showPDFSettings, setShowPDFSettings] = useState(false);
  const [activeTab, setActiveTab] = useState('All Entries');
  const [reportSettings, setReportSettings] = useState<ReportSettings>({
    columns: {
      date: true,
      cashIn: true,
      cashOut: true,
      balance: true,
      category: true,
      remark: true,
      paymentModes: true,
      attachments: true,
      voice: true,
      members: true,
      contact: true,
      time: false
    },
    customFields: {},
    otherOptions: {
      userNameAndNumber: true,
      appliedFilters: true
    }
  });

  const tabs = [
    'All Entries',
    'Day-wise',
    'Contact-wise',
    'Category-wise',
    'Payment Mode-wise'
  ];

  const filteredEntries = selectedEntries.length > 0 
    ? entries.filter(entry => selectedEntries.includes(entry.id))
    : entries;

  const handlePDFDownload = () => {
    generatePDF(filteredEntries, bookName, user?.full_name || 'User', reportSettings);
  };

  const handleExcelDownload = () => {
    generateExcel(filteredEntries, bookName, user?.full_name || 'User', reportSettings);
  };

  const calculateTotals = () => {
    const cashIn = filteredEntries
      .filter(entry => entry.type === 'cash_in')
      .reduce((sum, entry) => sum + Number(entry.amount), 0);
    
    const cashOut = filteredEntries
      .filter(entry => entry.type === 'cash_out')
      .reduce((sum, entry) => sum + Number(entry.amount), 0);
    
    return { cashIn, cashOut, balance: cashIn - cashOut };
  };

  const totals = calculateTotals();

  return (
    <>
      <Modal isOpen={isOpen} onClose={onClose} title="Export Transactions">
        <div className="space-y-6 max-h-[80vh] overflow-y-auto">
          {/* Tabs */}
          <div className="flex space-x-1 bg-gray-100 p-1 rounded-lg">
            {tabs.map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`px-3 py-2 text-sm font-medium rounded-md transition-colors ${
                  activeTab === tab
                    ? 'bg-white text-blue-600 shadow-sm'
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                {tab}
              </button>
            ))}
          </div>

          {/* Preview Section */}
          <div>
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-gray-900">Preview</h3>
              <button
                onClick={() => setShowPDFSettings(true)}
                className="flex items-center space-x-2 text-blue-600 hover:text-blue-700"
              >
                <Settings className="w-4 h-4" />
                <span className="text-sm">PDF Settings</span>
              </button>
            </div>

            {/* Report Preview */}
            <div className="bg-white border border-gray-200 rounded-lg p-6">
              <div className="flex items-center space-x-3 mb-6">
                <div className="w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center">
                  <span className="text-white font-bold">C</span>
                </div>
                <div>
                  <h2 className="text-xl font-bold text-gray-900">CashBook Report</h2>
                  <p className="text-sm text-gray-600">
                    Generated On - {new Date().toLocaleDateString('en-GB')}, {new Date().toLocaleTimeString('en-US', { hour12: false })} AM. Generated by - {user?.full_name || 'User'}
                  </p>
                </div>
              </div>

              <h3 className="text-lg font-semibold text-gray-900 mb-4">{bookName}</h3>

              {/* Summary */}
              <div className="grid grid-cols-3 gap-6 mb-6">
                <div>
                  <div className="text-sm text-gray-600">Total Cash In</div>
                  <div className="text-xl font-bold text-green-600">
                    {new Intl.NumberFormat('en-IN').format(totals.cashIn)}
                  </div>
                </div>
                <div>
                  <div className="text-sm text-gray-600">Total Cash Out</div>
                  <div className="text-xl font-bold text-red-600">
                    {new Intl.NumberFormat('en-IN').format(totals.cashOut)}
                  </div>
                </div>
                <div>
                  <div className="text-sm text-gray-600">Final Balance</div>
                  <div className={`text-xl font-bold ${totals.balance >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                    {new Intl.NumberFormat('en-IN').format(totals.balance)}
                  </div>
                </div>
              </div>

              <div className="text-sm text-gray-600 mb-4">
                Total No. of entries: {filteredEntries.length}
              </div>

              {/* Table Preview */}
              <div className="overflow-x-auto">
                <table className="w-full text-sm">
                  <thead className="bg-gray-50">
                    <tr>
                      {reportSettings.columns.date && <th className="px-3 py-2 text-left font-medium text-gray-700">Date</th>}
                      {reportSettings.columns.remark && <th className="px-3 py-2 text-left font-medium text-gray-700">Remark</th>}
                      {reportSettings.columns.contact && <th className="px-3 py-2 text-left font-medium text-gray-700">Contact</th>}
                      {reportSettings.columns.category && <th className="px-3 py-2 text-left font-medium text-gray-700">Category</th>}
                      {reportSettings.columns.paymentModes && <th className="px-3 py-2 text-left font-medium text-gray-700">Mode</th>}
                      {reportSettings.columns.attachments && <th className="px-3 py-2 text-left font-medium text-gray-700">Attachments</th>}
                      {reportSettings.columns.voice && <th className="px-3 py-2 text-left font-medium text-gray-700">Voice</th>}
                      {reportSettings.columns.cashIn && <th className="px-3 py-2 text-right font-medium text-gray-700">Cash In</th>}
                      {reportSettings.columns.cashOut && <th className="px-3 py-2 text-right font-medium text-gray-700">Cash Out</th>}
                      {reportSettings.columns.members && <th className="px-3 py-2 text-left font-medium text-gray-700">Entry By</th>}
                      {reportSettings.columns.balance && <th className="px-3 py-2 text-right font-medium text-gray-700">Balance</th>}
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-200">
                    {filteredEntries.slice(0, 3).map((entry, index) => {
                      const balance = filteredEntries.slice(0, index + 1).reduce((sum, e) => {
                        return e.type === 'cash_in' ? sum + Number(e.amount) : sum - Number(e.amount);
                      }, 0);
                      
                      return (
                        <tr key={entry.id}>
                          {reportSettings.columns.date && (
                            <td className="px-3 py-2">
                              {new Date(entry.date).toLocaleDateString('en-GB')}
                            </td>
                          )}
                          {reportSettings.columns.remark && (
                            <td className="px-3 py-2">{entry.remarks || '--'}</td>
                          )}
                          {reportSettings.columns.contact && (
                            <td className="px-3 py-2">{entry.contact_name || '--'}</td>
                          )}
                          {reportSettings.columns.category && (
                            <td className="px-3 py-2">{entry.category || '--'}</td>
                          )}
                          {reportSettings.columns.paymentModes && (
                            <td className="px-3 py-2">{entry.payment_mode}</td>
                          )}
                          {reportSettings.columns.attachments && (
                            <td className="px-3 py-2">{entry.attachments?.length ? `${entry.attachments.length} file(s)` : '--'}</td>
                          )}
                          {reportSettings.columns.voice && (
                            <td className="px-3 py-2">{entry.voice_recording ? 'Yes' : '--'}</td>
                          )}
                          {reportSettings.columns.cashIn && (
                            <td className="px-3 py-2 text-right">
                              {entry.type === 'cash_in' ? new Intl.NumberFormat('en-IN').format(Number(entry.amount)) : ''}
                            </td>
                          )}
                          {reportSettings.columns.cashOut && (
                            <td className="px-3 py-2 text-right">
                              {entry.type === 'cash_out' ? new Intl.NumberFormat('en-IN').format(Number(entry.amount)) : ''}
                            </td>
                          )}
                          {reportSettings.columns.members && (
                            <td className="px-3 py-2">{user?.full_name || 'User'}</td>
                          )}
                          {reportSettings.columns.balance && (
                            <td className="px-3 py-2 text-right">{new Intl.NumberFormat('en-IN').format(balance)}</td>
                          )}
                        </tr>
                      );
                    })}
                    {filteredEntries.length > 3 && (
                      <tr>
                        <td colSpan={Object.values(reportSettings.columns).filter(Boolean).length} className="px-3 py-2 text-center text-gray-500">
                          ... and {filteredEntries.length - 3} more entries
                        </td>
                      </tr>
                    )}
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          {/* Download Buttons */}
          <div className="flex justify-end space-x-3">
            <Button
              variant="outline"
              onClick={handleExcelDownload}
              className="flex items-center space-x-2"
            >
              <FileSpreadsheet className="w-4 h-4" />
              <span>Download as Excel</span>
            </Button>
            <Button
              onClick={handlePDFDownload}
              className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700"
            >
              <Download className="w-4 h-4" />
              <span>Download as PDF</span>
            </Button>
          </div>
        </div>
      </Modal>

      <PDFSettingsModal
        isOpen={showPDFSettings}
        onClose={() => setShowPDFSettings(false)}
        settings={reportSettings}
        onSettingsChange={setReportSettings}
      />
    </>
  );
}